# azure-pipelines-cd.yml
trigger:
  branches:
    include:
      - main   # deploy on main; change/remove as needed

pool:
  name: ci-cd

variables:
  AWS_DEFAULT_REGION: eu-central-1
  EKS_CLUSTER_NAME: microservice-cluster
  KUBECONFIG_PATH: $(Pipeline.Workspace)/.kube/config

stages:
- stage: Deploy
  displayName: Deploy to AWS EKS
  jobs:
  - job: DeployJob
    displayName: kubectl apply manifests
    steps:
      # Configure AWS creds (from pipeline secrets)
      - bash: |
          set -e
          aws configure set aws_access_key_id     "$(AWS_ACCESS_KEY_ID)"
          aws configure set aws_secret_access_key "$(AWS_SECRET_ACCESS_KEY)"
          aws configure set default.region        "$(AWS_DEFAULT_REGION)"
          aws sts get-caller-identity
        displayName: Configure AWS credentials

      # Update kubeconfig for EKS
      - bash: |
          set -e
          mkdir -p "$(Pipeline.Workspace)/.kube"
          aws eks update-kubeconfig \
            --name "$(EKS_CLUSTER_NAME)" \
            --region "$(AWS_DEFAULT_REGION)" \
            --kubeconfig "$(KUBECONFIG_PATH)"
          export KUBECONFIG="$(KUBECONFIG_PATH)"
          kubectl get nodes
        displayName: Update kubeconfig & verify cluster

      # Apply Deployment & Service
      - bash: |
          set -e
          export KUBECONFIG="$(KUBECONFIG_PATH)"
          kubectl apply -f kubernetes/deployment.yml
          kubectl rollout status deployment/microservice --timeout=180s || true
          kubectl apply -f kubernetes/service.yml
          kubectl get svc microservice-service
        displayName: kubectl apply (deployment + service)

      # Print the public URL (LB hostname or IP)
      - bash: |
          set -e
          export KUBECONFIG="$(KUBECONFIG_PATH)"
          echo "Waiting for LoadBalancer external address..."
          for i in {1..30}; do
            HOST=$(kubectl get svc microservice-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            IP=$(kubectl get svc microservice-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            URL="http://${HOST:-$IP}"
            if [ -n "$HOST" ] || [ -n "$IP" ]; then
              echo "App should be reachable at: $URL"
              echo "##vso[task.setvariable variable=APP_URL]$URL"
              exit 0
            fi
            sleep 10
          done
          echo "Still provisioning the LoadBalancer. Check again with:"
          echo "kubectl get svc microservice-service"
        displayName: Show public URL
