# azure-pipelines-cd.yml
trigger:
  branches:
    include:
      - main   # deploy on main; change/remove as you like

pool:
  name: ci-cd

# You can set these in the Variables UI instead of hardcoding.
variables:
  AWS_DEFAULT_REGION: $(AWS_DEFAULT_REGION)   # e.g. eu-central-1
  EKS_CLUSTER_NAME:  $(EKS_CLUSTER_NAME)      # e.g. my-eks
  KUBECONFIG_PATH:   $(Pipeline.Workspace)/.kube/config

stages:
- stage: Deploy
  displayName: Deploy to AWS EKS
  jobs:
  - job: DeployJob
    displayName: kubectl apply manifests
    steps:
      # Install kubectl
      - bash: |
          set -e
          curl -sSLo kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -sS https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          sudo install -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client
        displayName: Install kubectl

      # Install AWS CLI v2
      - bash: |
          set -e
          curl -sSLo awscliv2.zip https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
          unzip -q awscliv2.zip
          sudo ./aws/install
          aws --version
        displayName: Install AWS CLI

      # Configure AWS creds (from pipeline secrets)
      - bash: |
          set -e
          aws configure set aws_access_key_id     "$(AWS_ACCESS_KEY_ID)"
          aws configure set aws_secret_access_key "$(AWS_SECRET_ACCESS_KEY)"
          aws configure set default.region        "$(AWS_DEFAULT_REGION)"
          aws sts get-caller-identity
        displayName: Configure AWS credentials

      # Update kubeconfig for EKS
      - bash: |
          set -e
          mkdir -p "$(Pipeline.Workspace)/.kube"
          aws eks update-kubeconfig \
            --name "$(EKS_CLUSTER_NAME)" \
            --region "$(AWS_DEFAULT_REGION)" \
            --kubeconfig "$(KUBECONFIG_PATH)"
          export KUBECONFIG="$(KUBECONFIG_PATH)"
          kubectl get nodes
        displayName: Update kubeconfig & verify cluster

      # Apply Deployment & Service
      - bash: |
          set -e
          export KUBECONFIG="$(KUBECONFIG_PATH)"
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout status deployment/microservice --timeout=180s || true
          kubectl apply -f k8s/service.yaml
          kubectl get svc microservice-service
        displayName: kubectl apply (deployment + service)

      # Print the public URL (LB hostname or IP)
      - bash: |
          set -e
          export KUBECONFIG="$(KUBECONFIG_PATH)"
          # wait for LB to provision
          echo "Waiting for LoadBalancer external address..."
          for i in {1..30}; do
            HOST=$(kubectl get svc microservice-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            IP=$(kubectl get svc microservice-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            URL="http://${HOST:-$IP}"
            if [ -n "$HOST" ] || [ -n "$IP" ]; then
              echo "App should be reachable at: $URL"
              echo "##vso[task.setvariable variable=APP_URL]$URL"
              exit 0
            fi
            sleep 10
          done
          echo "Still provisioning the LoadBalancer. Check again with:"
          echo "kubectl get svc microservice-service"
        displayName: Show public URL
